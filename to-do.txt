***Mainly front end stuff***

Make register/sign in/edituser forms look better with actual bootstrap.

Make EditUser page ask for confirmation before submitting a request to change an admin

Make a "search by tag" modal and link to it on the home page (tagSearchModal)

More gracefully handle error on the "/write" form (or just prevent errors to begin with)
--don't allow multiples of the same tag
--enforce a valid url


***Involves back end***

Handle failed password resets/login attempts better
Notify user of successful login
    track failed password attempts, "lock" account after too many failed attempts

Clean up "post" implementation in front end. Could be more concise.
Anywhere that has the "postData" function can just be combined with
whatever function is under it (handleSubmit/login, etc)

Rethink routes for manipulating comments. The most sensible is probably:
"[articleId]/comments", then do CRUD operations from there. Move app.use(commentsRouter) from 'app.js' to articlesRouter.js'?

When changing the "noname" user from the admin page, the back end crashes with a "duplicate key" error in the email field

***Dockerizing***

IF (and it's a big if) I decide to dockerize this project...

Example: https://github.com/docker/awesome-compose/tree/master/react-express-mongodb

Change root/username in yml file to be variables

Use a mounted folder for data so it persists: https://docs.docker.com/storage/volumes/#mount-a-host-directory-as-a-data-volume



***"Icing on the cake" ideas.***

Have admins and super-admins, where only super-admins can give or take away admin access.

Instead of deleting articles, have them get a "deleted" designation, so they are recoverable.

Make it so author's can edit articles

Require authors to update their first/last name before writing articles instead of conditionally showing only the username if they have no first/last name.

Incorporate signing in with Google/facebook account

Add "Are you sure" modal to deleting anything from the admin page

Add the ability for creators to edit their content

Add parameters to the article model: display (default true), featured (and show featured first on front)

These are not part of the MVP (Minimum Viable Product). Once the basics are all DONE and polished, these features can be added.
No working on these until the MVP is DONE.

"Lazy Loading" does not currently involve the back end. For example, on the fullArticle page, 
the front end requests the full article list/comment list, then renders in parts.
Good because it delays creating pictures, but not TRUE lazy loading

Example: Front component "FullArticle" pulls comments, then performs "reverse" on the array to 
put them in "most recent order. Explore if it would be better to change on 
the back end to make express get them by date and send them in order in 
the first place. (Especially if this goes to lazy-loading later, this may make a difference)
Also, "Homepage.js" on front end does this for "articles"

--Write page changes
Add a "publish time" to the "Write" page to allow creators to choose when their articles go live
Add an "Edit" page to creators can change existing articles (that THEY wrote) (keep previous versions?) Use "PUT" route.
Add a spot for "highlight quote" for article, and render it in a large bold section aside on its display page
Instead of a thumbnail, allow uploading files (which would then need storage, adding complexity)

--Admin page changes
Instead of showing ALL users or ALL articles, develop a "search by" feature.
In theory, a fully-functioning news site might have thousands of users
and articles. Scrolling through to find a specific one would be tedious.

Email verification for user registration